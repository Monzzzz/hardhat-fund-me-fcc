{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Get fund from user\n//With draw funds\n// Set minimum fuding value in USD\n\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n// constant \n//immuable\n// 859,757\nerror FundMe__NotOwner();\n\n// interfaces, libraries, contracts\n\n/** @title A contract for crowd  funding\n* @author Elmond\n* @notice this contract is to demo a sample funding contract\n* @dev This implements price feed as a our library\n */\ncontract FundMe{\n    // Type declarations \n    using PriceConverter for uint256;\n\n    // State variables\n    event Funded(address indexed from, uint256 amount);\n    // constant doesn't use the storage slot, but it is stored in the byte code of the contract and decrease the gas price\n    uint256 public constant Minimum_USD = 50 * 1e18; \n    \n    address[] public funders;\n    // it is stored in the byte code of the contract\n    address public immutable i_owner;\n\n    mapping(address =>uint256) public addressToAmountFunded;\n\n    AggregatorV3Interface public priceFeed;\n\n    modifier onlyOwner{\n        if(msg.sender != i_owner) {revert FundMe__NotOwner();}// other address can't call this sontract \n        _;\n    }\n    \n    constructor(address priceFeedAddress) {// automatically send the the priceFeed that the coin address is running on\n        i_owner = msg.sender; // \n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n\n    }\n     \n\n    \n    function fund() public payable{  // payable make fund function red, but normal is orange.\n        // we want to be able to set a minimum amount in USD\n        // How do we send to this contract?\n        //msg.value is user balance\n        require(msg.value.getConversionRate(priceFeed) >= Minimum_USD, \"Didn't send enough\"); // 1e18 == 1*10**18== 1000000000000000000\n        // 18 decimals\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender]+=msg.value;\n        emit Funded(msg.sender,msg.value);\n        // a ton of computationn here\n        //What is reverting\n\n        // oracle is a tool that helps to interact with off-chain information. In this case, USD.\n    }\n\n    function withdraw() public onlyOwner { // onlyOwner is modifier below\n        // reset the array funds\n        for(uint256 funderIndex=0; funderIndex <funders.length; funderIndex++){\n            address funder= funders[funderIndex];\n            addressToAmountFunded[funder] =0; // msg.value\n        }\n        //reset the array\n        funders = new address[](0);\n        // actually withdraw the funds\n\n        //transfer (2300 gas, throws error)\n        //payable(msg.sender)=payable address\n        // payable(msg.sender).transfer(address(this).balance);// (this) means whole contract\n        // // send (2300 gas, return bool)\n        // bool sendSuccess= payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Send failed\"); // if above sentence fail it will display \"send failed\"\n        // // call (forward all gas or set gas, returns bool)\n        (bool callSuccess, )= payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\");\n        revert();\n\n    }\n   \n\n    // What happen if someone send this contract ETh without calling the fund function \n    // create to help people who accidentally called wrong function or send this contract money without fund function.\n    receive() external payable{\n        fund();\n    }\n    fallback() external payable{\n        fund();\n    }\n    \n    //fallback();\n}\n\n\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n\nlibrary PriceConverter{\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\n        // ABI \n        // Address 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n        (,int256 price,,,) = priceFeed.latestRoundData(); // we want just price\n        // ETH in terms of USD\n        // now the price has 8 decimal, so we have to divind more by 10\n        return uint256(price * 1e10); // 1*10\n    \n    }\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256){\n        uint256 ethPrice= getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) /1e18; // now we have 36 decimal place because 18 places from ethPrice and 18 places for ethAmount\n        return ethAmountInUsd;\n    }\n    //function withdraw(){}\n}\n// asking questions on github\n// markdown \n// ''' make it clear \n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}